Development Conventions

* Batch files are runnable from any directory.  If they create files, the files are created in the directory they are run from.
* No business logic in the server.
* No modifying param structures in the callee.
* "Tally" reports are done by pushing a reduce expression to the server to execute, with the assumption that the data returned will be manageable in size.
* Member records contain class code, not class key, so that you can delete and recreate a class without breaking the linkage.
* Don't trust client time.  Don't trust server time zone.  Do trust server UTC (or server local time?).

Design note:  if you're on server A, and you merge {A:1} with {B:1}, the result has to be {A:2, B:1} so that the changes involved in the merge itself cause a version bump.  Otherwise, if it resulted in {A:1, B:1} then it would be indistinguishable from a record resulting from a potentially different merge on another server.

* Client-side initialization.  Client JavaScript files have three(ish) initialization phases.  They can perform initialization operations at load time, but those operations cannot assume that any other JS file has loaded (except head.js).  They can init.push(func); those functions will be executed in load order after all files have been loaded, but they cannot assume that other files' init functions have executed.  They can init.push a function that itself calls init.push; those second-level init functions will be executed after all first-round init functions.  (It's a FIFO queue.)  Pretty much:  load-time sets up global variables, functions, and classes; first-round init creates objects, initializes global references to those objects, and adds children to document.head and document.body; second-round init starts dynamic processing like timers.  In theory there could be third and later rounds of initialization through additional nested calls to init.push, but no need has yet been identified for them.  NOTE:  Existing initialization has not been vetted for conformance with this convention and may rely on load ordering or execution timing!